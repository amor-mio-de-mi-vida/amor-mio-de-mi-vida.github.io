<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The Pragmatic Programmer</title>
    <url>/2024/09/27/book/The%20Pragmatic%20Programmer/</url>
    <content><![CDATA[<h2 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h2><ul>
<li><p><strong>每年至少学习一种新语言</strong></p>
<p>  不同语言以不同方式解决相同的问题。通过学习若干不同的方法， 可以帮助你拓宽你的思维，并避免墨守成规。此外，现在学习许多语言已容易了许多，感谢可从网上自由获取的软件财富</p>
</li>
<li><p><strong>每季度阅读一本技术书籍</strong></p>
<p>  书店里摆满了许多书籍，讨论与你当前的项目有关的有趣话题。 一旦你养成习惯，就一个月读一本书。在你掌握了你正在使用的技术之后，扩宽范围，阅读一些与你的项目无关的书籍。</p>
</li>
<li><p><strong>也要阅读非技术书籍</strong></p>
<p>  记住计算机是由人— —你在设法满足其需要的人——使用的，这十分重要。不要忘了等式中人这一边</p>
</li>
<li><p><strong>上课</strong></p>
<p>  在本地的学院或大学、或是将要来临的下一次会展上寻找有趣的课程。</p>
</li>
<li><p><strong>参加本地用户组织</strong></p>
<p>  不要只是去听讲，而要主动参与。与世隔绝对你的职业生涯来说可能是致命的;打听一下你们公司以外的人都在做什么。</p>
</li>
<li><p><strong>试验不同的环境</strong></p>
<p>  如果你只在Windows 上工作，就在家玩一玩Unix(可自由获取的Linux 就正好)。 如果你只用过makefile和编辑器，就试一试IDE，反之亦然。</p>
</li>
<li><p><strong>跟上潮流</strong></p>
<p>  订阅商务杂志和其他期刊。选择所涵盖的技术与你当前的项目不同的刊物</p>
</li>
<li><p><strong>上网</strong></p>
<p>  想要了解某种新语言或其他技术的各种特性?要了解其他人的相关经验，了解他们使用的特定行话，等等，新闻组是一种很好的方式。上网冲浪，查找论文、商业站点，以及其他任何你可以找到的信息来源</p>
</li>
</ul>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="A-pragmatic-philosophy"><a href="#A-pragmatic-philosophy" class="headerlink" title="A pragmatic philosophy"></a>A pragmatic philosophy</h3><ul>
<li><p><strong>Provide Options, Don’t Make Lame Excuses 提供各种选择，不要找蹩脚的借口</strong></p>
<p>  如果你确实同意要为某个结果负责，你就应切实负起责任。当你犯错误(就如同我们所有人都 会犯错误一样)、或是判断失误时，诚实地承认它，并设法给出各种选择。不要责备别人或别的东西，或是拼凑借口。除了尽你所能以外，你必须分析风险是否超出了你的控制。</p>
</li>
<li><p><strong>Don’t Live with Broken Windows 不要容忍破窗户</strong></p>
<p>  不要留着“破窗户” (低劣的设计、错误决策、或是糟糕的代码)不修。发现一个就修一个。 如果没有足够的时间进行适当的修理，就用木板把它钉起来。或许你可以把出问题的代码放人注 释 (comment out)， 或是显示“未实现”消息 ，或是用虚设的数据(dummy data) 加以替代 。 采取某种行动防止进一步的损坏，并说明情势处在你的控制之下。</p>
</li>
<li><p><strong>Be a Catalyst for Change 做变化的催化剂</strong></p>
<p>  这正是拿出石头的时候。设计出你可以合理要求的东西，好好开发它。一旦完成，就拿给大家看，让他们大吃一惊。然后说:“要是我们增加…可能就会更好。”假装那并不重要。坐回椅子上，等着他们开始要你增加你本来就想要的功能。人们发现，参与正在发生的成功要更容易。 让他们瞥见未来，你就能让他们聚集在你周围’。</p>
</li>
<li><p><strong>Remember the Big Picture 记住大图景</strong></p>
<p>  我们没有做过这个—真的，但有人说，如果你抓一只青蛙放进沸水里，它会一下子跳出来。 但是，如果你把青蛙放进冷水里，然后慢慢加热，青蛙不会注意到温度的缓慢变化，会呆在锅里， 直到被煮熟。</p>
</li>
<li><p><strong>Make Quality a Requirements Issue 使质量成为需求问题</strong></p>
<p>  你常常会处在须要进行权衡的情形中。让人惊奇的是 ，许多用户宁愿在今天用上有一些 “ 毛 边” 的软件，也不愿等待 一年后的多媒体版本。许多预算吃紧的T部门都会同意这样的说法。 今天的了不起的软件常常比明天的完美软件更可取。如果你给用户某样东西，让他们及早使用， 他们的反馈常常会把你引向更好的最终解决方案</p>
</li>
<li><p><strong>Invest Regularly in Your Knowledge Portfolio 定期为你的知识资产投资</strong></p>
<p>  管理知识资产与管理金融资产非常相似：</p>
<ul>
<li>严肃的投资者定期投资——作为习惯<ul>
<li>就像金融投资一样，你必须定期为你的知识资产投资。即使投资量很小，习惯自身也和总量一样重要</li>
</ul>
</li>
<li>多元化是长期成功的关键<ul>
<li>你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特 定技术的各种特性。但不要就此止步。计算技术的面貌变化很快— —今天的热门技术明天就可能变得近平无用(或至少是不再抢手)。你掌握的技术越多，你就越能更好地进行调整， 赶上变化 。</li>
</ul>
</li>
<li>聪明的投资者在保守的投资和高风险、高回报的投资之间平衡他们的资产<ul>
<li>从高风险、可能有高回报，到低风险、低回报，技术存在于这样一条谱带上。把 你所有的金钱都投入可能突然崩盘的高风险股票并不是 一个好主意;你也不应太保守，错过可能的机会。不要把你所有的技术鸡蛋放在一个篮子里</li>
</ul>
</li>
<li>投资者设法低买高卖，以获取最大回报<ul>
<li>在新兴的技术流行之前学习它可能就和找到被低估的股票—样困难，但所得到的 就和那样的股票带来的收益一样。在Java 刚出现时学习它可能有风险，但对于现在已步入该领域的顶尖行列的早期采用者，这样做得到了非常大的回报。</li>
</ul>
</li>
<li>应周期性的重新评估和平衡资产<ul>
<li>这是一个非常动荡的行业。你上个月开始研究的热门技术现在也许已像石头一样冰冷。也许你需要重温你有一阵子没有使用的数据库技术。又或许，如果你之前试用过另一种语言，你就会更有可能获得那个新职位……</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Critically Analyze What You Read and Hear 批判地分析你读到的和听到的</strong></p>
</li>
<li><p><strong>It’s Both What You Say and the Way You Say It 你说什么和你怎么说同样重要</strong></p>
</li>
</ul>
<h3 id="A-pragmatic-approach"><a href="#A-pragmatic-approach" class="headerlink" title="A pragmatic approach"></a>A pragmatic approach</h3><ul>
<li><p><strong>Make It Easy to Reuse 让复用变得容易</strong></p>
<p>  你所要做的是营造 一种环境，在其中要找到并复用已有的东西，比自己编写更容易。如果不容易，大家就不会去复用。而如果不进行复用，你们就会有重复知识的风险。</p>
</li>
<li><p><strong>Eliminate Effects Between Unrelated Things 消除无关事物之间的影响</strong></p>
<p>  如果你编写正交的系统，你得到两个主要好处:提高生产率与降低风险</p>
</li>
<li><p><strong>There Are No Final Decisions 不存在最终决策</strong></p>
<p>  错误在于假定决策是浇铸在石头上的— 同时还在于没有为可能出现的意外事件做准备。 要把决策视为是写在沙滩上的，而不要把它们刻在石头上。大浪随时可能到来，把它们抹去。</p>
</li>
<li><p><strong>Use Tracer Bullets to Find the Target 用曳光弹找到目标</strong></p>
<p>  曳光弹行之有效，是因为它们与真正的子弹在相同的环境、相同的约束下工作。它们快速飞 向目标，所以枪手可以得到即时的反馈。同时，从实践的角度看，这样的解决方案也更便宜。 为了在代码中获得同样的效果，我们要找到某种东西，让我们能快速、直观和可重复地从需求出发，满足最终系统的某个方面要求</p>
</li>
<li><p>Prototype to Learn 为了学习而制作原型<br>  在构建原型时，你可以忽略哪些细节？</p>
<ul>
<li>正确性：你也许可以在适当的地方使用虚设的数据</li>
<li>完整性：原型也许只能在非常有限的意义上工作，也许只有一项预先选择的输人数据和一个菜单项。</li>
<li>健壮性。错误检查很可能不完整，或是完全没有。如果你偏离预定路径，原型就可能崩溃， 并在“烟火般的灿烂显示中焚毁”。这没有关系。</li>
<li>风格。在纸上承认这一点让人痛苦，但原型代码可能没有多少注释或文档。根据使用原型的经验，你也许会撰写出大量文档，但关于原型系统自身的内容相对而言却非常少。</li>
</ul>
</li>
<li><p>Program Close to the Problem domain 靠近问题领域编程<br>  无论是用于配置和控制应用程序的简单语言，还是用于指定规则或过程的更为复杂的语言， 我们认为，你都应该考虑让你的项目更靠近问题领域。通过在更高的抽象层面上编码，你获得了 专心解决领域问题的自由，并且可以忽略琐碎的实现细节。<br>  记住，应用有许多用户。有最终用户，他们了解商业规则和所需输出;也有次级用户：操作人员、配置与测试管理人员、支持与维护程序员，还有将来的开发者。他们都有各自的问题领域， 而你可以为他们所有人生成小型环境和语言。</p>
</li>
<li><p>Estimate to Avoid Surprises 估算，以避免发生意外</p>
</li>
<li><p>Iterate the Schedule with the Code 通过代码对进度表进行迭代<br>  一 开始，你对需要多少次迭代、或是需要多少时间，也许只有模糊的概念。有些方法要求你 把这个作为初始计划的一部分定下来，但除了最微不足道的项目，这是 一个错误。除非你在开发与前一个应用类似的应用，拥有同样的团队和同样的技术，否则，你就只不过是在猜想。 于是你完成了初始功能的编码与测试，并将此标记为第 一轮增量开发的结束。基于这样的经 验，你可以提炼你原来对迭代次数，以及在每次选代中可以包含的内容的猜想。提炼会变得一次 比 一次好，对进度表的信心也将随之增长。</p>
</li>
</ul>
<h3 id="The-Basic-Tools"><a href="#The-Basic-Tools" class="headerlink" title="The Basic Tools"></a>The Basic Tools</h3><ul>
<li><p>Keep Knowledge in Plain Text 用纯文本保存知识</p>
</li>
<li><p>Use the Power of Command Shells 利用命令 shell 的力量</p>
</li>
<li><p>Use a Single Editor Well 用好一种编辑器<br>  选一种编辑器，彻底了解它 ，并将其用于所有的编辑任务。如果你用一种编辑器(或一组键 绑定)进行所有的文本编辑活动，你就不必停下来思考怎样完成文本操纵:必需的键击将成为本能反应。编辑器将成为你双手的延伸;键会在滑过文本和思想时歌唱起来。这就是我们的目标。</p>
</li>
<li><p>Always Use Source Code Control 总是使用源码控制<br>  总是。即使你的团队只有你一个人，你的项目只需一周时间;即使那是“用过就扔” 的原型; 即使你的工作对象并非源码;确保每样东西都处在源码控制之下——文档、电话号码表、给供应商的备忘录、makefie、构建与发布流程、烧制CD母盘的shell小脚本— 每样东西。我们例行 公事地对我们敲人的每一样东西进行源码控制(包括本书的文本)。即使我们不是在开发项目， 我们的日常工作也被安全地保存在仓库中。</p>
</li>
<li><p>Fix the Problem, Not the Blame 要修正问题，而不是发出指责<br>  发现了他人的bug之后，你可以花费时间和精力去指责让人厌恶的肇事者。在有些工作环境 中，这是文化的一部分，并且可能是“疏通剂”。但是，在技术竞技场上，你应该专注于修正问题，而不是发出指责。</p>
</li>
<li><p>Don’t Panic 不要恐慌<br>  人很容易恐慌，特别是如果你正面临最后期限的到来、或是正在设法找出bug的原因，有一个神经质的老板或客户在你的脖子后面喘气。但非常重要的事情是，要后退一步，实际思考什么可能造成你认为表征了bug的那些症状。</p>
</li>
<li><p>“Select” Isn’t Broken “Select 没有问题”<br>  我们参加过一个项目的开发，有位高级工程师确信select 系统调用在Solaris 上有问题。再多 的劝说或逻辑也无法改变他的想法(这台机器上的所有其他网络应用都工作良好这一事实也一样无济于事)。他花了数周时间编写绕开这一问题的代码，因为某种奇怪的原因，却好像并没有解决问题。当最后被迫坐下来、阅读关于select 的文档时，他在几分钟之内就发现并纠正了问题。&#x3D;&#x3D;&#x3D;&#x3D;现在每当有人开始因为很可能是我们自己的故障而抱怨系统时，我们就会使用“select 没有问题” 作为温和的提醒。&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>  如果你“只改动了一样东西”，系统就停止了工作，那样东西很可能就需要对此负责— 直接地或间接地，不管那看起来有多牵强。有时被改动的东西在你的控制之外 :OS 的新版本、编译器、数据库或是其他第三方软件都可能会毁坏先前的正确代码 。可能会出现新的bug。你先前 已绕开的bug得到了修正，却破坏了用于绕开它的代码。API 变了，功能变了;简而言之，这是全新的局面，你必须在这些新的条件下重新测试系统。所以在考虑升级时要紧盯着进度表;你可能会想等到下一次发布之后再升级。</p>
</li>
<li><p>Don’t Assume it —— Prove It 不要假定，要证明<br>  某样东西出错时，你感到吃惊的程度与你对正在运行的代码的信任及信心成正比。 这就是为什么，在面对“让人吃惊” 的故障时，你必须意识到你的 一个或更多的假设是错的。不 要因为你“知道” 它能工作而轻易放过与bug有牵连的例程或代码。证明它。用这些数据、这些边界条件、在这个语境中证明它。</p>
</li>
</ul>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><blockquote>
<p>这是痛苦的事：<br>看着你自己的烦忧，并且知道<br>不是别人，而是你自己一人所致<br>——索福克勒斯：《埃阿斯》</p>
</blockquote>
<h3 id="调试的心理学"><a href="#调试的心理学" class="headerlink" title="调试的心理学"></a>调试的心理学</h3><p>要接受事实:调试就是解决问题，要据此发起进攻。<br>bug 是你的过错还是别人的过错，并不是真的很有关系。它仍然是你的问题。</p>
<h3 id="调试的思维方式"><a href="#调试的思维方式" class="headerlink" title="调试的思维方式"></a>调试的思维方式</h3><blockquote>
<p>最容易欺骗的人就是自己<br>—— Edward Bulwer-Lytton, <em>The Disowned</em></p>
</blockquote>
<p>在你开始调试之前，选择恰当的思维方式十分重要。你须要关闭每天用于保护自我(ego) 的许多防卫措施，忘掉你可能面临的任何项目压力，并让自己放松下来。</p>
<p>在调试时小心“近视”。要抵制只修正你看到的症状的急迫愿望:更有可能的情况是，实际 的故障离你正在观察的地方可能还有几步远，并且可能涉及许多其他的相关事物。要总是设法找 出问题的根源，而不只是问题的特定表现。</p>
<h3 id="从何处开始"><a href="#从何处开始" class="headerlink" title="从何处开始"></a>从何处开始</h3><p>在开始查看bug之前，要确保你是在能够成功编译的代码上工作——没有警告。我们例行公 事地把编译器警告级设得尽可能高。把时间浪费在设法找出编译器能够为你找出的问题上没有意义!我们需要专注于手上更困难的问题。</p>
<ul>
<li>你也许需要与报告bug 的用户面谈，以搜集比最初给你的数据更多的数据 </li>
<li>人工合成的测试不能足够地演练 (exercise)应用 。 你必须既强硬地测试边界条件，又测试现实中的最终用户的使用模式。你需要系统地进行这样的测试。</li>
</ul>
<h3 id="造成惊讶的要素"><a href="#造成惊讶的要素" class="headerlink" title="造成惊讶的要素"></a>造成惊讶的要素</h3><p>当你遇到让人吃惊的bug时，除了只是修正它而外，你还需要确定先前为什么没有找出这个 故障。考虑你是否需要改进单元测试或其他测试，以让它们有能力找出这个故障。</p>
<p>还有，如果bug是一些坏数据的结果，这些数据在造成爆发之前传播通过了若千层面，看一 看在这些例程中进行更好的参数检查是否能更早地隔离它。</p>
<p>在你对其进行处理的同时，代码中是否有任何其他地方容易受这同 一个bug的影响?现在就是 找出并修正它们的时机。确保无论发生什么，你都知道它是否会再次发生。</p>
<p>如果修正这个bug需要很长时间，问问你自己为什么。你是否可以做点什么，让下一次修正 这个bug变得更容易?也许你可以内建更好的测试挂钩，或是编写日志文件分析器。 </p>
<p>最后，如果bug 是某人的错误假定的结果，与整个团队一起讨论这个问题。如果 一个人有误 解，那么许多人可能也有。</p>
<p>去做所有这些事情，下一次你就将很有希望不再吃惊。</p>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>下面是一些你可以在架构原型中寻求解答的具体问题:</p>
<ul>
<li>主要组件的责任是否得到了良好定义?是否适当?</li>
<li>主要组件间的协作是否得到了良好定义?</li>
<li>耦合是否得以最小化?</li>
<li>你能否确定重复的潜在来源?</li>
<li>接又定义和各项约束是否可接受?</li>
<li>每个模块在执行过程中是否能访问到其所需的数据?是否能在需要时进行访问?<br>根据我们制作原型的经验，最后一项往往会产生最让人惊讶和最有价值的结果。</li>
</ul>
<table>
<thead>
<tr>
<th>如果这听起来像你…</th>
<th>那么考虑…</th>
</tr>
</thead>
<tbody><tr>
<td>我使用许多不同的编辑器，但只使用其基本特性</td>
<td>选一种强大的编辑器，好好学习他</td>
</tr>
<tr>
<td>我有最喜欢的编辑器，但不使用其全部特性</td>
<td>学习他们。减少你需要敲击的键数</td>
</tr>
<tr>
<td>我有最喜欢的编辑器，只要可能就使用它</td>
<td>设法扩展它，并将其用于比现在更多的任务</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>The Pragmatic Programmer</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>How to read paper</title>
    <url>/2022/10/25/paper/How%20to%20read%20paper/</url>
    <content><![CDATA[<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><ul>
<li>title</li>
<li>abstract</li>
<li>introduction</li>
<li>method</li>
<li>experiment</li>
<li>conclusion</li>
</ul>
<h2 id="Pass-1"><a href="#Pass-1" class="headerlink" title="Pass 1"></a>Pass 1</h2><p>title——是否相关？<br>abstract——论文在做什么？<br>conclusion</p>
<p>略看论文的图和表<br>论文在大概讲什么东西，方法怎么样，结果怎么样，是否适合自己？</p>
<h2 id="Pass-2"><a href="#Pass-2" class="headerlink" title="Pass 2"></a>Pass 2</h2><p>主要关注重点的图和表<br>相关的重要文献标记</p>
<p>继续思考论文的质量以及和自己研究方向的契合程度，决定一下要不要进行第三遍的完完全全彻底的精读。</p>
<h2 id="Pass-3"><a href="#Pass-3" class="headerlink" title="Pass 3"></a>Pass 3</h2><p>代入自己去思考如果要是我来写这篇文章，我会如何组织这个结构？读实验部分的时候，可以思考一下，作者是如何描述自己的实验的，你可以思考，如果换自己来做的话，能不能比作者做得更好？ 这一遍读的时候，一定要明白作者每句话，每个字在说什么，并且最好可以脑补出它整个流程是什么样子的，似乎是自己在做实验，写论文一样。如果有困难的话，可以借助思维导图或者流程图这样的工具，把他的整个流程以可视化的形式展现出来，帮助自己理解。</p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
      </tags>
  </entry>
</search>
