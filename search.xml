<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The Pragmatic Programmer</title>
    <url>/2024/09/27/the%20pragmatic%20programmer/The%20Pragmatic%20Programmer/</url>
    <content><![CDATA[<h2 id="goals"><a href="#goals" class="headerlink" title="goals"></a>goals</h2><ul>
<li><p><strong>每年至少学习一种新语言</strong></p>
<p>  不同语言以不同方式解决相同的问题。通过学习若干不同的方法， 可以帮助你拓宽你的思维，并避免墨守成规。此外，现在学习许多语言已容易了许多，感谢可从网上自由获取的软件财富</p>
</li>
<li><p><strong>每季度阅读一本技术书籍</strong></p>
<p>  书店里摆满了许多书籍，讨论与你当前的项目有关的有趣话题。 一旦你养成习惯，就一个月读一本书。在你掌握了你正在使用的技术之后，扩宽范围，阅读一些与你的项目无关的书籍。</p>
</li>
<li><p><strong>也要阅读非技术书籍</strong></p>
<p>  记住计算机是由人— —你在设法满足其需要的人——使用的，这十分重要。不要忘了等式中人这一边</p>
</li>
<li><p><strong>上课</strong></p>
<p>  在本地的学院或大学、或是将要来临的下一次会展上寻找有趣的课程。</p>
</li>
<li><p><strong>参加本地用户组织</strong></p>
<p>  不要只是去听讲，而要主动参与。与世隔绝对你的职业生涯来说可能是致命的;打听一下你们公司以外的人都在做什么。</p>
</li>
<li><p><strong>试验不同的环境</strong></p>
<p>  如果你只在Windows 上工作，就在家玩一玩Unix(可自由获取的Linux 就正好)。 如果你只用过makefile和编辑器，就试一试IDE，反之亦然。</p>
</li>
<li><p><strong>跟上潮流</strong></p>
<p>  订阅商务杂志和其他期刊。选择所涵盖的技术与你当前的项目不同的刊物</p>
</li>
<li><p><strong>上网</strong></p>
<p>  想要了解某种新语言或其他技术的各种特性?要了解其他人的相关经验，了解他们使用的特定行话，等等，新闻组是一种很好的方式。上网冲浪，查找论文、商业站点，以及其他任何你可以找到的信息来源</p>
</li>
</ul>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul>
<li><p><strong>Provide Options, Don’t Make Lame Excuses 提供各种选择，不要找蹩脚的借口</strong></p>
<p>  如果你确实同意要为某个结果负责，你就应切实负起责任。当你犯错误(就如同我们所有人都 会犯错误一样)、或是判断失误时，诚实地承认它，并设法给出各种选择。不要责备别人或别的东西，或是拼凑借口。除了尽你所能以外，你必须分析风险是否超出了你的控制。</p>
</li>
<li><p><strong>Don’t Live with Broken Windows 不要容忍破窗户</strong></p>
<p>  不要留着“破窗户” (低劣的设计、错误决策、或是糟糕的代码)不修。发现一个就修一个。 如果没有足够的时间进行适当的修理，就用木板把它钉起来。或许你可以把出问题的代码放人注 释 (comment out)， 或是显示“未实现”消息 ，或是用虚设的数据(dummy data) 加以替代 。 采取某种行动防止进一步的损坏，并说明情势处在你的控制之下。</p>
</li>
<li><p><strong>Be a Catalyst for Change 做变化的催化剂</strong></p>
<p>  这正是拿出石头的时候。设计出你可以合理要求的东西，好好开发它。一旦完成，就拿给大家看，让他们大吃一惊。然后说:“要是我们增加…• 可能就会更好。”假装那并不重要。坐回椅子上，等着他们开始要你增加你本来就想要的功能。人们发现，参与正在发生的成功要更容易。 让他们瞥见未来，你就能让他们聚集在你周围’。</p>
</li>
<li><p><strong>Remember the Big Picture 记住大图景</strong></p>
<p>  我们没有做过这个— 真的，但有人说，如果你抓一只青蛙放进沸水里，它会一下子跳出来。 但是，如果你把青蛙放进冷水里，然后慢慢加热，青蛙不会注意到温度的缓慢变化，会呆在锅里， 直到被煮熟。</p>
</li>
<li><p><strong>Make Quality a Requirements Issue 使质量成为需求问题</strong></p>
<p>  你常常会处在须要进行权衡的情形中。让人惊奇的是 ，许多用户宁愿在今天用上有一些 “ 毛 边” 的软件，也不愿等待 一年后的多媒体版本。许多预算吃紧的T部门都会同意这样的说法。 今天的了不起的软件常常比明天的完美软件更可取。如果你给用户某样东西，让他们及早使用， 他们的反馈常常会把你引向更好的最终解决方案</p>
</li>
<li><p><strong>Invest Regularly in Your Knowledge Portfolio 定期为你的知识资产投资</strong></p>
<p>  管理知识资产与管理金融资产非常相似：</p>
<ul>
<li>严肃的投资者定期投资——作为习惯<ul>
<li>就像金融投资一样，你必须定期为你的知识资产投资。即使投资量很小，习惯自身也和总量一样重要</li>
</ul>
</li>
<li>多元化是长期成功的关键<ul>
<li>你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特 定技术的各种特性。但不要就此止步。计算技术的面貌变化很快— —今天的热门技术明天就 可能变得近平无用(或至少是不再抢手)。你掌握的技术越多，你就越能更好地进行调整， 赶上变化 。</li>
</ul>
</li>
<li>聪明的投资者在保守的投资和高风险、高回报的投资之间平衡他们的资产<ul>
<li>从高风险、可能有高回报，到低风险、低回报，技术存在于这样一条谱带上。把 你所有的金钱都投入可能突然崩盘的高风险股票并不是 一个好主意;你也不应太保守，错过可能的机会。不要把你所有的技术鸡蛋放在一个篮子里</li>
</ul>
</li>
<li>投资者设法低买高卖，以获取最大回报<ul>
<li>在新兴的技术流行之前学习它可能就和找到被低估的股票—样困难，但所得到的 就和那样的股票带来的收益一样。在Java 刚出现时学习它可能有风险，但对于现在已步入该领域的顶尖行列的早期采用者，这样做得到了非常大的回报。</li>
</ul>
</li>
<li>应周期性的重新评估和平衡资产<ul>
<li>这是一个非常动荡的行业。你上个月开始研究的热门技术现在也许已像石头一样冰冷。也许你需要重温你有一阵子没有使用的数据库技术。又或许，如果你之前试用过另一种语言，你就会更有可能获得那个新职位……</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Critically Analyze What You Read and Hear 批判地分析你读到的和听到的</strong></p>
</li>
<li><p><strong>It’s Both What You Say and the Way You Say It 你说什么和你怎么说同样重要</strong></p>
</li>
<li><p><strong>Make It Easy to Reuse 让复用变得容易</strong></p>
<p>  你所要做的是营造 一种环境，在其中要找到并复用已有的东西，比自己编写更容易。如果不容易，大家就不会去复用。而如果不进行复用，你们就会有重复知识的风险。</p>
</li>
<li><p><strong>Eliminate Effects Between Unrelated Things 消除无关事物之间的影响</strong></p>
<p>  如果你编写正交的系统，你得到两个主要好处:提高生产率与降低风险</p>
</li>
<li><p><strong>There Are No Final Decisions 不存在最终决策</strong></p>
<p>  错误在于假定决策是浇铸在石头上的— 同时还在于没有为可能出现的意外事件做准备。 要把决策视为是写在沙滩上的，而不要把它们刻在石头上。大浪随时可能到来，把它们抹去。</p>
</li>
<li><p><strong>Use Tracer Bullets to Find the Target 用曳光弹找到目标</strong></p>
<p>  曳光弹行之有效，是因为它们与真正的子弹在相同的环境、相同的约束下工作。它们快速飞 向目标，所以枪手可以得到即时的反馈。同时，从实践的角度看，这样的解决方案也更便宜。 为了在代码中获得同样的效果，我们要找到某种东西，让我们能快速、直观和可重复地从需求出发，满足最终系统的某个方面要求</p>
</li>
</ul>
]]></content>
      <categories>
        <category>The Pragmatic Programmer</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
</search>
